pipeline {
    agent any
    environment {
        // Paramètres Docker
        DOCKER_IMAGE = 'gestion-budget'
        DOCKER_REGISTRY = 'https://index.docker.io/v1/'
        DOCKER_CREDENTIALS_ID = 'docker'
        DOCKER_USERNAME = 'yaogameli'

        // Paramètres de déploiement
        SSH_CREDENTIALS_ID = 'jenkins-ssh-key'
        PRODUCTION_SERVER = 'yao@192.168.1.46'
        
        // Paramètre de l'application
        APP_NAME = 'mSuivi_des_depenses'
        APP_PORT = '5010'
        
        // Paramètre Git 
        COMMITHASH = "${env.GIT_COMMIT?.take(7) ?: 'unknown'}"
        
        // gestions des ressources
        CONTAINER_CPU = '512'
        CONTAINER_MEMORY = '512M'
    }
    stages {
        stage('Clone Repository') {
            steps {
                checkout scm
            }
        }
        stage('Build and Push Docker Image') {
            steps {
                script {
                    docker.withRegistry("${DOCKER_REGISTRY}", "${DOCKER_CREDENTIALS_ID}") {
                        def dockerImage = docker.build("${DOCKER_USERNAME}/${DOCKER_IMAGE}:${COMMITHASH}", "--no-cache .")
                        dockerImage.push()
                        dockerImage.push("latest")
                    }
                }
            }
        }
        stage('Deploy to Production') {
            steps {
                sshagent([SSH_CREDENTIALS_ID]) {
                    sh """
                    ssh -o StrictHostKeyChecking=no ${PRODUCTION_SERVER} '
                        docker pull ${DOCKER_USERNAME}/${DOCKER_IMAGE}:${COMMITHASH}
                        docker stop ${APP_NAME} || true
                        docker rm ${APP_NAME} || true
                        docker run -d --name ${APP_NAME} \\
                            -p ${APP_PORT}:${APP_PORT} \\
                            --restart unless-stopped \\
                            --cpu-shares=${CONTAINER_CPU} \\
                            --memory=${CONTAINER_MEMORY} \\
                            -e APP_PORT=${APP_PORT} \\
                            ${DOCKER_USERNAME}/${DOCKER_IMAGE}:${COMMITHASH}
                    '
                    """
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                sshagent([SSH_CREDENTIALS_ID]) {
                    sh """
                    ssh -o StrictHostKeyChecking=no ${PRODUCTION_SERVER} << EOF
                        if docker ps | grep -q ${APP_NAME}; then
                            echo "Deploiement réussi: ${APP_NAME} est en cours d'exécution"
                        else
                            echo "Echec du déploiement: ${APP_NAME} n'est pas en cours d'exécution"
                            exit 1
                        fi
EOF
                    """
                }
            }
        }
    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline exécuté avec succès!'
        }
        failure {
            echo "Echec durant l'exécution du pipeline. Vérifiez les logs SVP."
        }
    }
}